// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PokedexClient is the client API for Pokedex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PokedexClient interface {
	GetPokemon(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Pokemon, error)
}

type pokedexClient struct {
	cc grpc.ClientConnInterface
}

func NewPokedexClient(cc grpc.ClientConnInterface) PokedexClient {
	return &pokedexClient{cc}
}

func (c *pokedexClient) GetPokemon(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Pokemon, error) {
	out := new(Pokemon)
	err := c.cc.Invoke(ctx, "/Pokedex/GetPokemon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokedexServer is the server API for Pokedex service.
// All implementations must embed UnimplementedPokedexServer
// for forward compatibility
type PokedexServer interface {
	GetPokemon(context.Context, *SearchRequest) (*Pokemon, error)
	mustEmbedUnimplementedPokedexServer()
}

// UnimplementedPokedexServer must be embedded to have forward compatible implementations.
type UnimplementedPokedexServer struct {
}

func (UnimplementedPokedexServer) GetPokemon(context.Context, *SearchRequest) (*Pokemon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPokemon not implemented")
}
func (UnimplementedPokedexServer) mustEmbedUnimplementedPokedexServer() {}

// UnsafePokedexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PokedexServer will
// result in compilation errors.
type UnsafePokedexServer interface {
	mustEmbedUnimplementedPokedexServer()
}

func RegisterPokedexServer(s grpc.ServiceRegistrar, srv PokedexServer) {
	s.RegisterService(&Pokedex_ServiceDesc, srv)
}

func _Pokedex_GetPokemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokedexServer).GetPokemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pokedex/GetPokemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokedexServer).GetPokemon(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pokedex_ServiceDesc is the grpc.ServiceDesc for Pokedex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pokedex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Pokedex",
	HandlerType: (*PokedexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPokemon",
			Handler:    _Pokedex_GetPokemon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pokemon.proto",
}
